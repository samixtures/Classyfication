{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","components/Particles.js","insert_image.png","reportWebVitals.js","index.js"],"names":["Navigation","style","display","justifyContent","className","Logo","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","displayListItems","list","map","reptile","IMAGE_URL","FaceRecognition","imageUrl","category_names","category_percents","src","width","height","ParticlesComponent","props","options","useMemo","fullScreen","enable","zIndex","interactivity","events","onHover","mode","modes","push","quantity","repulse","distance","particles","links","color","move","speed","min","max","opacity","value","size","particlesInit","useCallback","engine","loadSlim","id","init","categ_names","categ_perc","App","event","setState","input","target","getNames","arr","res_str","res_int","i","length","name","getPerc","toFixed","state","MODEL_ID","MODEL_VERSION_ID","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","result","outputs","data","concepts","forceUpdate","catch","error","console","log","this","Particles","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3e3ba6e3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navigation = () => {\n    return (\n        <nav style={{display:'flex', justifyContent:'flex-end'}}>\n            <p className=\"f3 link dim underline pa3 pointer\">\n            </p>\n        </nav>\n    )\n}\n\nexport default Navigation","import React from \"react\";\nimport Tilt from 'react-parallax-tilt';\nimport './Logo.css'\n// import face from './face.png'\nimport brain from './brain.png'\n\nconst Logo = () => {\n    return (\n        <div className = 'ma4 mt0'>\n            {/* <Tilt className=\"logo br2 shadow-2 pa3\"style={{ height: '100px', width: '100px', color: 'white'}}>\n                <img style={{paddingTop:'5px'}} alt = \"logo\" src = {brain}/>\n\n            </Tilt> */}\n        </div>\n    );\n}\n\nexport default Logo","import React from \"react\";\nimport './ImageLinkForm.css'\n\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\n    return(\n        <div>\n            <h1 className = \"top_words\">Classyficiation</h1>\n            <div className=\"center\">\n                <div className=\"form center pa4 br3 shadow-5\">\n                    <input className=\"f4 pa2 w-70 center\" type = \"text\" onChange={onInputChange}/>\n                    <button onClick = {onButtonSubmit} className=\"w-30 f4 grow link ph3 pv2 dib white bg-light-green\">Detect</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default ImageLinkForm","import React from \"react\";\nimport './FaceRecognition.css';\n\nfunction displayListItems(list) {\n    // const reptiles = [\"alligator\", \"snake\", \"lizard\"];\n  \n    // return reptiles.map((reptile) => <li key = {reptile}>{reptile}</li>);\n    return list.map((reptile) => <li key = {reptile}>{reptile}</li>);\n  }\n\nconst FaceRecognition = ({imageUrl, category_names, category_percents}) => {\n    return(\n        <div className=\"center ma\">\n            <div className=\"absolute mt2\">\n                <img src = {imageUrl} width='500px' height='auto'/>\n                <div className = \"center\">\n                    <ul className = \"list bot_words\">\n                        <li><h1>CATEGORIES</h1></li>\n                        {displayListItems(category_names)}\n                    </ul>\n                    <ul className = \"list bot_words\">\n                        <li><h1>ACCURACY</h1></li>\n                        {displayListItems(category_percents)}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FaceRecognition;","import React, {Component} from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation'\nimport Logo from './components/Logo/Logo'\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm'\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition'\nimport Particles from './components/Particles'\nimport myImage from './insert_image.png'\n\nlet IMAGE_URL;\n\nlet categ_names = [];\nlet categ_perc = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: 'https://akm-img-a-in.tosshub.com/indiatoday/images/story/201810/stockvault-person-studying-and-learning---knowledge-concept178241_0.jpeg?yCXmhi7e2ARwUtzHHlvtcrgETnDgFwCK&size=1200:675',\n    }\n  }\n  onInputChange = (event) => {\n    // console.log(event.target.value);\n    this.setState({input: event.target.value});\n    // IMAGE_URL = event.taraget.value;\n    // console.log(IMAGE_URL)\n  }\n  getNames = (arr) => {\n    // console.log(arr);\n    let res_str = [];\n    let res_int = [];\n    for (let i = 0; i < arr.length; i++) {\n      categ_names.push(arr[i].name)\n      res_str.push(arr[i].name)\n      res_int.push(arr[i].value)\n    }\n    // console.log(res_str);\n    // console.log(res_int);\n    return res_str;\n  }\n\n  getPerc = (arr) => {\n    // console.log(arr);\n    let res_str = [];\n    let res_int = [];\n    for (let i = 0; i < arr.length; i++) {\n      categ_perc.push(arr[i].value)\n      res_str.push(arr[i].name)\n      res_int.push((arr[i].value * 100).toFixed(2))\n    }\n    // console.log(res_str);\n    // console.log(res_int);\n    return res_int;\n  }\n\n\n  \n  onButtonSubmit = () => {\n\n    // I don't understand why these console.logs are undefined unless I do this destructuring process.\n    // If I don't destructure then these console.log as undefined but the ones in the render console.log\n    // properly\n    \n    this.setState({imageUrl: this.state.input});\n    IMAGE_URL = this.imageUrl;\n    const { imageUrl, input } = this.state;\n    IMAGE_URL = input;\n    // console.log(\"input is\", input);\n    // console.log(\"imageUrl is\", imageUrl);\n    // console.log(\"INPUT IS\", input);\n    // console.log(\"IMAGE URL IS\", IMAGE_URL);\n\n    // Regardless of my lack of understanding, it works with this code.\n    // The image shows up updated based on the URL typed into the input bar\n    // and the console properly outputs what the image is showing\n\n\n\n    // this.setState({imageUrl: this.state.input});\n    // IMAGE_URL = this.imageUrl;\n    // console.log(\"INPUT IS\", this.input);\n    // console.log(\"IMAGE URL IS\", IMAGE_URL);\n          //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model details, and the URL\n    // of the image we want as an input. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'samixtures';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'f69d3700448f4e23b9af49398d30fe47';\n    const APP_ID = 'my-first-application';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'general-image-recognition';\n    const MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';    \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n    .then(response => response.json())\n    .then(result => categ_names = this.getNames(result.outputs[0].data.concepts))\n    .then(() => this.forceUpdate()) // LET'S GOO. This Forces the rerender\n    .catch(error => console.log('error', error));\n    \n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n    .then(response => response.json())\n    .then(result => categ_perc = this.getPerc(result.outputs[0].data.concepts))\n    .then(() => this.forceUpdate()) // LET'S GOO. This Forces the rerender\n    .catch(error => console.log('error', error));\n    //    .then(result => categ_perc = this.getPerc(result.outputs[0].data.concepts))\n  }\n  \n  \n  render() {\n    // For some reason imageUrl and input states are undefined regardless of what code I add anywhere\n    // unless I add these few lines below\n    const { imageUrl, input } = this.state;\n    if (categ_names.length > 0) {\n      // console.log(\"category names is\", categ_names);\n    }\n    // console.log(\"input is\", input);\n    // console.log(\"imageUrl is\", imageUrl);\n    return (\n      <div className=\"App\">\n        <Navigation/>\n        <Logo/>\n        <ImageLinkForm \n        onInputChange={this.onInputChange} \n        onButtonSubmit={this.onButtonSubmit}\n        />\n        <FaceRecognition imageUrl = {IMAGE_URL} category_names = {categ_names} category_percents = {categ_perc}/>\n        <Particles id=\"tsparticles\" />\n  {/* {      <Navigation/>\n        <Logo/>\n        <ImageLinkForm/>\n        <FaceRecognition/>} */}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\"; // loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\nimport { useCallback, useMemo } from \"react\";\n\n// tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\nconst ParticlesComponent = (props) => {\n  // using useMemo is not mandatory, but it's recommended since this value can be memoized if static\n  const options = useMemo(() => {\n    // using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      // background: {\n      //   color: \"#000\", // this sets a background color for the canvas\n      // },\n    \n      fullScreen: {\n        enable: true, // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1, // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n      },\n      interactivity: {\n        events: {\n          // onClick: {\n          //   enable: true, // enables the click event\n          //   mode: \"push\", // adds the particles on click\n          // },\n          onHover: {\n            enable: true, // enables the hover event\n            mode: \"repulse\", // make the particles run away from the cursor\n          },\n        },\n        modes: {\n          push: {\n            quantity: 10, // number of particles to add on click\n          },\n          repulse: {\n            distance: 100, // distance of the particles from the cursor\n          },\n        },\n      },\n      particles: {\n        links: {\n          color: \"#0000\",\n          enable: true, // enabling this will make particles linked together\n          distance: 50, // maximum distance for linking the particles\n        },\n        move: {\n          enable: true, // enabling this will make particles move in the canvas\n          speed: { min: 1, max: 5 }, // using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n        },\n        opacity: {\n          value: { min: 0.3, max: 0.7 }, // using a different opacity, to have some semitransparent effects\n        },\n        size: {\n          value: { min: 1, max: 3 }, // let's randomize the particles size a bit\n        },\n        color: {\n          value: \"#fcba03\",\n        },\n      },\n    };\n  }, []);\n\n  // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n  const particlesInit = useCallback((engine) => {\n    loadSlim(engine);\n    // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []);\n\n  // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n  return <Particles id={props.id} init={particlesInit} options={options} />;\n};\n\nexport default ParticlesComponent;","export default __webpack_public_path__ + \"static/media/insert_image.1f64dabb.png\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}